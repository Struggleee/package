import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";

function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import React, { Fragment, useRef, useState, useLayoutEffect, useEffect } from "react";
import { Matrix } from "transformation-matrix-js";
import getImageData from "get-image-data";
import Crosshairs from "../Crosshairs";
import { getEnclosingBox } from "./region-tools.js";
import { makeStyles } from "@material-ui/core/styles";
import styles from "./styles";
import classnames from "classnames";
import RegionLabel from "../RegionLabel";
import LockIcon from "@material-ui/icons/Lock";
import Paper from "@material-ui/core/Paper";
import HighlightBox from "../HighlightBox";
import PreventScrollToParents from "../PreventScrollToParents";
import useWindowSize from "../hooks/use-window-size.js";
import useMouse from "./use-mouse";
import useProjectRegionBox from "./use-project-box";
import useLoadImage from "../hooks/use-load-image";
import useExcludePattern from "../hooks/use-exclude-pattern";
import { useRafState } from "react-use";
import PointDistances from "../PointDistances";
import RegionTags from "../RegionTags";
import RegionSelectAndTransformBoxes from "../RegionSelectAndTransformBoxes";
import VideoOrImageCanvasBackground from "../VideoOrImageCanvasBackground";
import useEventCallback from "use-event-callback";
var useStyles = makeStyles(styles);

var getDefaultMat = function getDefaultMat() {
  return Matrix.from(1, 0, 0, 1, -10, -10);
};

export default (function (_ref) {
  var regions = _ref.regions,
      imageSrc = _ref.imageSrc,
      videoSrc = _ref.videoSrc,
      videoTime = _ref.videoTime,
      realSize = _ref.realSize,
      showTags = _ref.showTags,
      _ref$onMouseMove = _ref.onMouseMove,
      onMouseMove = _ref$onMouseMove === void 0 ? function (p) {
    return null;
  } : _ref$onMouseMove,
      _ref$onMouseDown = _ref.onMouseDown,
      onMouseDown = _ref$onMouseDown === void 0 ? function (p) {
    return null;
  } : _ref$onMouseDown,
      _ref$onMouseUp = _ref.onMouseUp,
      onMouseUp = _ref$onMouseUp === void 0 ? function (p) {
    return null;
  } : _ref$onMouseUp,
      _ref$dragWithPrimary = _ref.dragWithPrimary,
      dragWithPrimary = _ref$dragWithPrimary === void 0 ? false : _ref$dragWithPrimary,
      _ref$zoomWithPrimary = _ref.zoomWithPrimary,
      zoomWithPrimary = _ref$zoomWithPrimary === void 0 ? false : _ref$zoomWithPrimary,
      _ref$createWithPrimar = _ref.createWithPrimary,
      createWithPrimary = _ref$createWithPrimar === void 0 ? false : _ref$createWithPrimar,
      _ref$pointDistancePre = _ref.pointDistancePrecision,
      pointDistancePrecision = _ref$pointDistancePre === void 0 ? 0 : _ref$pointDistancePre,
      regionClsList = _ref.regionClsList,
      regionTagList = _ref.regionTagList,
      showCrosshairs = _ref.showCrosshairs,
      showPointDistances = _ref.showPointDistances,
      allowedArea = _ref.allowedArea,
      _ref$RegionEditLabel = _ref.RegionEditLabel,
      RegionEditLabel = _ref$RegionEditLabel === void 0 ? null : _ref$RegionEditLabel,
      _ref$videoPlaying = _ref.videoPlaying,
      videoPlaying = _ref$videoPlaying === void 0 ? false : _ref$videoPlaying,
      onImageOrVideoLoaded = _ref.onImageOrVideoLoaded,
      onChangeRegion = _ref.onChangeRegion,
      onBeginRegionEdit = _ref.onBeginRegionEdit,
      onCloseRegionEdit = _ref.onCloseRegionEdit,
      onBeginBoxTransform = _ref.onBeginBoxTransform,
      onBeginMovePolygonPoint = _ref.onBeginMovePolygonPoint,
      onAddPolygonPoint = _ref.onAddPolygonPoint,
      onSelectRegion = _ref.onSelectRegion,
      onBeginMovePoint = _ref.onBeginMovePoint,
      onDeleteRegion = _ref.onDeleteRegion,
      onChangeVideoTime = _ref.onChangeVideoTime,
      onChangeVideoPlaying = _ref.onChangeVideoPlaying;
  var classes = useStyles();
  var canvasEl = useRef(null);
  var layoutParams = useRef({});

  var _useRafState = useRafState(false),
      _useRafState2 = _slicedToArray(_useRafState, 2),
      dragging = _useRafState2[0],
      changeDragging = _useRafState2[1];

  var _useRafState3 = useRafState(0),
      _useRafState4 = _slicedToArray(_useRafState3, 2),
      maskImagesLoaded = _useRafState4[0],
      changeMaskImagesLoaded = _useRafState4[1];

  var _useRafState5 = useRafState(null),
      _useRafState6 = _slicedToArray(_useRafState5, 2),
      zoomStart = _useRafState6[0],
      changeZoomStart = _useRafState6[1];

  var _useRafState7 = useRafState(null),
      _useRafState8 = _slicedToArray(_useRafState7, 2),
      zoomEnd = _useRafState8[0],
      changeZoomEnd = _useRafState8[1];

  var _useRafState9 = useRafState(getDefaultMat()),
      _useRafState10 = _slicedToArray(_useRafState9, 2),
      mat = _useRafState10[0],
      changeMat = _useRafState10[1];

  var maskImages = useRef({});
  var windowSize = useWindowSize();

  var _useMouse = useMouse({
    canvasEl: canvasEl,
    dragging: dragging,
    mat: mat,
    layoutParams: layoutParams,
    changeMat: changeMat,
    zoomStart: zoomStart,
    zoomEnd: zoomEnd,
    changeZoomStart: changeZoomStart,
    changeZoomEnd: changeZoomEnd,
    changeDragging: changeDragging,
    zoomWithPrimary: zoomWithPrimary,
    dragWithPrimary: dragWithPrimary,
    onMouseMove: onMouseMove,
    onMouseDown: onMouseDown,
    onMouseUp: onMouseUp
  }),
      mouseEvents = _useMouse.mouseEvents,
      mousePosition = _useMouse.mousePosition;

  useLayoutEffect(function () {
    return changeMat(mat.clone());
  }, [windowSize]);
  var innerMousePos = mat.applyToPoint(mousePosition.current.x, mousePosition.current.y);
  var projectRegionBox = useProjectRegionBox({
    layoutParams: layoutParams,
    mat: mat
  });

  var _useState = useState(),
      _useState2 = _slicedToArray(_useState, 2),
      imageDimensions = _useState2[0],
      changeImageDimensions = _useState2[1];

  var imageLoaded = Boolean(imageDimensions && imageDimensions.naturalWidth);
  var onVideoOrImageLoaded = useEventCallback(function (_ref2) {
    var naturalWidth = _ref2.naturalWidth,
        naturalHeight = _ref2.naturalHeight,
        duration = _ref2.duration;
    var dims = {
      naturalWidth: naturalWidth,
      naturalHeight: naturalHeight,
      duration: duration
    };
    if (onImageOrVideoLoaded) onImageOrVideoLoaded(dims);
    changeImageDimensions(dims); // Redundant update to fix rerendering issues

    setTimeout(function () {
      return changeImageDimensions(dims);
    }, 10);
  });
  var excludePattern = useExcludePattern();
  var canvas = canvasEl.current;

  if (canvas && imageLoaded) {
    var clientWidth = canvas.clientWidth,
        clientHeight = canvas.clientHeight;
    var fitScale = Math.max(imageDimensions.naturalWidth / (clientWidth - 20), imageDimensions.naturalHeight / (clientHeight - 20));

    var _iw = imageDimensions.naturalWidth / fitScale,
        _ih = imageDimensions.naturalHeight / fitScale;

    layoutParams.current = {
      iw: _iw,
      ih: _ih,
      fitScale: fitScale,
      canvasWidth: clientWidth,
      canvasHeight: clientHeight
    };
  }

  useLayoutEffect(function () {
    if (!imageDimensions) return;
    var clientWidth = canvas.clientWidth,
        clientHeight = canvas.clientHeight;
    canvas.width = clientWidth;
    canvas.height = clientHeight;
    var context = canvas.getContext("2d");
    context.save();
    context.transform.apply(context, _toConsumableArray(mat.clone().inverse().toArray()));
    var _layoutParams$current = layoutParams.current,
        iw = _layoutParams$current.iw,
        ih = _layoutParams$current.ih;

    if (allowedArea) {
      // Pattern to indicate the NOT allowed areas
      var x = allowedArea.x,
          y = allowedArea.y,
          w = allowedArea.w,
          h = allowedArea.h;
      context.save();
      context.globalAlpha = 0.25;
      var outer = [[0, 0], [iw, 0], [iw, ih], [0, ih]];
      var inner = [[x * iw, y * ih], [x * iw + w * iw, y * ih], [x * iw + w * iw, y * ih + h * ih], [x * iw, y * ih + h * ih]];
      context.moveTo.apply(context, _toConsumableArray(outer[0]));
      outer.forEach(function (p) {
        return context.lineTo.apply(context, _toConsumableArray(p));
      });
      context.lineTo.apply(context, _toConsumableArray(outer[0]));
      context.closePath();
      inner.reverse();
      context.moveTo.apply(context, _toConsumableArray(inner[0]));
      inner.forEach(function (p) {
        return context.lineTo.apply(context, _toConsumableArray(p));
      });
      context.lineTo.apply(context, _toConsumableArray(inner[0]));
      context.fillStyle = excludePattern || "#f00";
      context.fill();
      context.restore();
    }

    context.save();
    context.globalAlpha = mat.a * 0.5 + 0.5;
    context.lineWidth = mat.a * 1 + 1;

    if (context.globalAlpha > 0.6) {
      context.shadowColor = "black";
      context.shadowBlur = 4;
    }

    var _iterator = _createForOfIteratorHelper(regions.filter(function (r) {
      return r.visible || r.visible === undefined;
    })),
        _step;

    try {
      var _loop = function _loop() {
        var region = _step.value;

        switch (region.type) {
          case "point":
            {
              context.save();
              context.beginPath();
              context.strokeStyle = region.color;
              context.moveTo(region.x * iw - 10, region.y * ih);
              context.lineTo(region.x * iw - 2, region.y * ih);
              context.moveTo(region.x * iw + 10, region.y * ih);
              context.lineTo(region.x * iw + 2, region.y * ih);
              context.moveTo(region.x * iw, region.y * ih - 10);
              context.lineTo(region.x * iw, region.y * ih - 2);
              context.moveTo(region.x * iw, region.y * ih + 10);
              context.lineTo(region.x * iw, region.y * ih + 2);
              context.moveTo(region.x * iw + 5, region.y * ih);
              context.arc(region.x * iw, region.y * ih, 5, 0, 2 * Math.PI);
              context.stroke();
              context.restore();
              break;
            }

          case "box":
            {
              context.save();
              context.shadowColor = "black";
              context.shadowBlur = 4;
              context.strokeStyle = region.color;
              context.strokeRect(region.x * iw, region.y * ih, region.w * iw, region.h * ih);
              context.restore();
              break;
            }

          case "polygon":
            {
              context.save();
              context.shadowColor = "black";
              context.shadowBlur = 4;
              context.strokeStyle = region.color;
              context.beginPath();
              context.moveTo(region.points[0][0] * iw, region.points[0][1] * ih);

              var _iterator2 = _createForOfIteratorHelper(region.points),
                  _step2;

              try {
                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                  var _point = _step2.value;
                  context.lineTo(_point[0] * iw, _point[1] * ih);
                }
              } catch (err) {
                _iterator2.e(err);
              } finally {
                _iterator2.f();
              }

              if (!region.open) context.closePath();
              context.stroke();
              context.restore();
              break;
            }

          case "pixel":
            {
              context.save();

              if (maskImages.current[region.src]) {
                if (maskImages.current[region.src].nodeName === "CANVAS") {
                  context.globalAlpha = 0.6;
                  context.drawImage(maskImages.current[region.src], region.sx * iw, region.sy * ih, region.w * iw, region.h * ih);
                }
              } else {
                maskImages.current[region.src] = new Image();

                maskImages.current[region.src].onload = function () {
                  var img = maskImages.current[region.src];
                  var newCanvas = document.createElement("canvas");
                  newCanvas.width = img.naturalWidth;
                  newCanvas.height = img.naturalHeight;
                  var ctx = newCanvas.getContext("2d");
                  ctx.drawImage(img, 0, 0);
                  var imgData = ctx.getImageData(0, 0, img.naturalWidth, img.naturalHeight);

                  for (var i = 0; i < imgData.data.length; i += 4) {
                    var _imgData$data$slice = imgData.data.slice(i, i + 4),
                        _imgData$data$slice2 = _slicedToArray(_imgData$data$slice, 4),
                        r = _imgData$data$slice2[0],
                        g = _imgData$data$slice2[1],
                        b = _imgData$data$slice2[2],
                        a = _imgData$data$slice2[3];

                    var black = r < 10 && g < 10 && b < 10;
                    imgData.data[i] = 0;
                    imgData.data[i + 1] = 0;
                    imgData.data[i + 2] = black ? 255 : 0;
                    imgData.data[i + 3] = black ? 255 : 0;
                  }

                  ctx.clearRect(0, 0, img.naturalWidth, img.naturalHeight);
                  ctx.putImageData(imgData, 0, 0);
                  maskImages.current[region.src] = newCanvas;
                  changeMaskImagesLoaded(maskImagesLoaded + 1);
                };

                maskImages.current[region.src].src = region.src;
              }

              context.restore();
              break;
            }
        }
      };

      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        _loop();
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    context.restore();
    context.restore();
  });
  var _layoutParams$current2 = layoutParams.current,
      iw = _layoutParams$current2.iw,
      ih = _layoutParams$current2.ih;
  var zoomBox = !zoomStart || !zoomEnd ? null : _objectSpread({}, mat.clone().inverse().applyToPoint(zoomStart.x, zoomStart.y), {
    w: (zoomEnd.x - zoomStart.x) / mat.a,
    h: (zoomEnd.y - zoomStart.y) / mat.d
  });

  if (zoomBox) {
    if (zoomBox.w < 0) {
      zoomBox.x += zoomBox.w;
      zoomBox.w *= -1;
    }

    if (zoomBox.h < 0) {
      zoomBox.y += zoomBox.h;
      zoomBox.h *= -1;
    }
  }

  var imagePosition = {
    topLeft: mat.clone().inverse().applyToPoint(0, 0),
    bottomRight: mat.clone().inverse().applyToPoint(iw, ih)
  };
  return /*#__PURE__*/React.createElement("div", {
    style: {
      width: "100%",
      height: "100%",
      maxHeight: "calc(100vh - 68px)",
      position: "relative",
      overflow: "hidden",
      cursor: createWithPrimary ? "crosshair" : dragging ? "grabbing" : dragWithPrimary ? "grab" : zoomWithPrimary ? mat.a < 1 ? "zoom-out" : "zoom-in" : undefined
    }
  }, showCrosshairs && /*#__PURE__*/React.createElement(Crosshairs, {
    key: "crossHairs",
    mousePosition: mousePosition
  }), imageLoaded && /*#__PURE__*/React.createElement(RegionSelectAndTransformBoxes, {
    key: "regionSelectAndTransformBoxes",
    regions: regions,
    mouseEvents: mouseEvents,
    projectRegionBox: projectRegionBox,
    dragWithPrimary: dragWithPrimary,
    createWithPrimary: createWithPrimary,
    zoomWithPrimary: zoomWithPrimary,
    onBeginMovePoint: onBeginMovePoint,
    onSelectRegion: onSelectRegion,
    layoutParams: layoutParams,
    mat: mat,
    onBeginBoxTransform: onBeginBoxTransform,
    onBeginMovePolygonPoint: onBeginMovePolygonPoint,
    onAddPolygonPoint: onAddPolygonPoint
  }), imageLoaded && showTags && /*#__PURE__*/React.createElement(PreventScrollToParents, {
    key: "regionTags"
  }, /*#__PURE__*/React.createElement(RegionTags, {
    regions: regions,
    projectRegionBox: projectRegionBox,
    mouseEvents: mouseEvents,
    regionClsList: regionClsList,
    regionTagList: regionTagList,
    onBeginRegionEdit: onBeginRegionEdit,
    onChangeRegion: onChangeRegion,
    onCloseRegionEdit: onCloseRegionEdit,
    onDeleteRegion: onDeleteRegion,
    layoutParams: layoutParams,
    imageSrc: imageSrc,
    RegionEditLabel: RegionEditLabel
  })), zoomWithPrimary && zoomBox !== null && /*#__PURE__*/React.createElement("div", {
    key: "zoomBox",
    style: {
      position: "absolute",
      zIndex: 1,
      border: "1px solid #fff",
      pointerEvents: "none",
      left: zoomBox.x,
      top: zoomBox.y,
      width: zoomBox.w,
      height: zoomBox.h
    }
  }), showPointDistances && /*#__PURE__*/React.createElement(PointDistances, {
    key: "pointDistances",
    regions: regions,
    realSize: realSize,
    projectRegionBox: projectRegionBox,
    pointDistancePrecision: pointDistancePrecision
  }), /*#__PURE__*/React.createElement(PreventScrollToParents, Object.assign({
    style: {
      width: "100%",
      height: "100%"
    }
  }, mouseEvents), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("canvas", {
    className: classes.canvas,
    ref: canvasEl
  }), /*#__PURE__*/React.createElement(VideoOrImageCanvasBackground, {
    videoPlaying: videoPlaying,
    imagePosition: imagePosition,
    mouseEvents: mouseEvents,
    onLoad: onVideoOrImageLoaded,
    videoTime: videoTime,
    videoSrc: videoSrc,
    imageSrc: imageSrc,
    onChangeVideoTime: onChangeVideoTime,
    onChangeVideoPlaying: onChangeVideoPlaying
  }))), /*#__PURE__*/React.createElement("div", {
    className: classes.zoomIndicator
  }, (1 / mat.a * 100).toFixed(0), "%"));
});